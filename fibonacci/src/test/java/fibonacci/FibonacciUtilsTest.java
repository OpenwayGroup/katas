package fibonacci;

import org.junit.Test;

import java.math.BigInteger;

import static fibonacci.FibonacciUtils.fibonacciNum;
import static fibonacci.FibonacciUtils.fibonacciSqrSum;
import static fibonacci.FibonacciUtils.fibonacciSum;
import static fibonacci.FibonacciUtils.newFibonacciStream;
import static java.math.BigInteger.ONE;
import static java.math.BigInteger.ZERO;
import static java.util.Arrays.asList;
import static java.util.stream.Collectors.toList;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.assertThat;


public class FibonacciUtilsTest {

    private static final BigInteger TWO = new BigInteger("2");
    private static final BigInteger THREE = new BigInteger("3");
    private static final BigInteger FIVE = new BigInteger("5");
    private static final BigInteger EIGHT = new BigInteger("8");
    private static final BigInteger THIRTEEN = new BigInteger("13");
    private static final BigInteger SUM_100 = new BigInteger("354224848179261915075");
    private static final BigInteger SUM_10000 = new BigInteger("88083137989997064605355872998857923445691333015376030932812485815888664307789011385238647061572694566755888008658862476758094375234981509702215595106015601812940878487465890539696395631360292400123725490667987980947195761919733084221263262792135552511961663188744083262743015393903228035182529922900769207624088879893951554938584166812233127685528968882435827903110743620870056104022290494963321073406865860606579792362403866826411642270661211435590340090149458419810817251120025713501918959350654895682804718752319215892119222907223279849851227166387954139546662644064653804466345416102543306712688251378793506564112970620367672131344559199027717813404940431009754143637417645359401155245658646088296578097547699141284451819782703782878668237441026255023475279003880007450550868002409533068098127495095667313120369142331519140185017719214501847645741030739351025342932514280625453085775191996236343792432215700850773568257988920265539647922172315902209901079830195949058505943508013044450503826167880993094540503572266189964694973263576375908606977788395730196227274629745722872833622300472769312273603346624292690875697438264265712313123637644491367875538847442013130532147345613099333195400845560466085176375175045485046787815133225349388996334014329318304865656815129208586686515835880811316065788759195646547703631454040090435955879604123186007481842117640574158367996845627012099571008761776991075470991386301988104753915798231741447012236434261594666985397841758348337030914623617101746431922708522824868155612811426016775968762121429282582582088871795463467796927317452368633552346819405423359738696980252707545944266042764236577381721803749442538053900196250284054406347238606575093877669323501452512412179883698552204038865069179867773579705703841178650618818357366165649529547898801198617541432893443650952033983923542592952070864044249738338089778163986683069566736505126466886304227253105034231716761535350441178724210841830855527586882822093246545813120624113290391593897765219320931179697869997243770533719319530526369830529543842405655495229382251039116426750156771132964375");
    private static final BigInteger SUM_SQR_10000 = new BigInteger("183156626366136951529104607492691306669222408085267434400740698867570382982681155296358764097908396220320034049094405942391763563684692479406485480145964594747639667660928597080433954614778480681113911298059754062983784848814875871116222771220893351152579963113858665619542203602862409759056564291098695156793307541183504685045845816507008368441701465348305254226973191077244412761407067712378784342601836063482098282583427001601097906218690692982139130041768293208987510426095631940165520079756479153009240110890728853595863325772370989000716760609413371178268108070583707137437573522718895976682592761371291455396014667053462986574248580232560161925871909114445536051257772261614623898272705394987718637731332809057616540424096971667897585652424640832495422373417339704026343841230314978255699390676949168384637782001108761795748632696428516184976597875046011349397321715693127712518516040904224247294944068887642860543202361721020254699418520253326093867762961205666672509932518167179689232584043376988326833500117851408820605240618413681007981065051046210816338709057196291056266476392390546687786783310228665059979457352782489849682259686098425030923756837882713380660390938505782350303740031783845784840754397133212631512888678590746892568293336670831810471208327887699728671048074726682184287063934588123710925454927769154842987233901639276320306989174871168569471303706815441099181533189502041149658969874085456448389354653861621431973185960647338586896233149392639296514777996621056188740338201678673407848162089158822975571257651589099813076713170705286604392227776450625447044737303001778239684457190455220602998330333889128828451009339187179287904546815010824869120759595209322602913022206837155503352934820858072342633313783010018952601701919855097167868968577821731327262009108890144895702020376649310181009894211162944532123929627683175425603809592136231759001902374117435710961793158561268292886533871912729304235547600644768272898150940399826626220685981172239945216580949078807618836869672448475519776475834603879662259460489190010937722176297537344586180101764674428727"
                                                                 + "2304138569898049605338716164482084655859725540359787958385920542699087761134582777641953956214466369437162030763497022739385764217579063654065549048226381146025632765440425216771957026362360718835462696225687616309241529900148779415643928229282659741775675891837345646908217954004367544987228689152779395575892678256255287208372100604447207707048803076628415033438225273909334358720666869918946975782577846884999940513111119069165919747128706693202506947582783402838307520476705538252752766902494459164088313811459057272726672438369042422386409228032698052235271446143168001121374842814699444151665433878964764326320194305208999086733029325131407987392862005798871572166521437669766699390223500800470591848672055376945686004172245551865699567072490107895430102507722456505081904397972439853109530219045184140438874923561987611322928532010611964244281328403755647821583911235716877101191102472959347369557204550941571955989217529173719652498659380639598526392148809879213051975645227691190224528458603481218528298657921307792232335198274562097832343695398923119283234793198140055698747002930451284616015231029270210805612022103981767798975914557185563812006770011489750152720318488614855040845177749217500482686035862356679483998256766548730780786677884276295236973766143112783665542416262879363652422970726284051650922147428414696019382871683781925871243084225299416523238925576326020922622563135435762951415103455928588346450046577282415142588927793237149585497186184409758222333887468613905704754688152764013999565053186032926579508823213285369862116998690316871881930672997641136982948013086616279249790527867771173536820870079093848219186729033544656431230461515839066242676929549017724066765386841795445788673375018289053379352662870937614635408208127245673524206441158788593519904799674010522581701998870820817813722810134931416960320711473062413447277345833135631400534637924610640210869523858028697002426318009200185036637178729244310423558350864591519299350639473091396006860513526803984400500965833480733281359484386672179632670362950273275997884440338479438062332378489608530179375");


    private static final BigInteger f[] = new BigInteger[] { ONE, ONE, TWO, THREE, FIVE, EIGHT, THIRTEEN };
    private static final BigInteger fSqr[] = new BigInteger[] { f[0].multiply(f[0]),
                                                                f[1].multiply(f[1]),
                                                                f[2].multiply(f[2]),
                                                                f[3].multiply(f[3]),
                                                                f[4].multiply(f[4]),
                                                                f[5].multiply(f[5]),
                                                                f[6].multiply(f[6]) };

    @Test
    public void fibonacciStreamTest() {
        assertThat(newFibonacciStream().limit(7).collect(toList()), equalTo(asList(f)));
    }

    @Test
    public void fibonacciNumTest() {
        assertThat(fibonacciNum(1), equalTo(f[0]));
        assertThat(fibonacciNum(2), equalTo(f[1]));
        assertThat(fibonacciNum(3), equalTo(f[2]));
        assertThat(fibonacciNum(4), equalTo(f[3]));
        assertThat(fibonacciNum(5), equalTo(f[4]));
        assertThat(fibonacciNum(6), equalTo(f[5]));
        assertThat(fibonacciNum(7), equalTo(f[6]));
    }

    @Test
    public void fibonacciSumTest() {
        BigInteger sum = ZERO;
        assertThat(fibonacciSum(0), equalTo(sum));
        sum = sum.add(f[0]);
        assertThat(fibonacciSum(1), equalTo(sum));
        sum = sum.add(f[1]);
        assertThat(fibonacciSum(2), equalTo(sum));
        sum = sum.add(f[2]);
        assertThat(fibonacciSum(3), equalTo(sum));
        sum = sum.add(f[3]);
        assertThat(fibonacciSum(4), equalTo(sum));
        sum = sum.add(f[4]);
        assertThat(fibonacciSum(5), equalTo(sum));
        sum = sum.add(f[5]);
        assertThat(fibonacciSum(6), equalTo(sum));
        sum = sum.add(f[6]);
        assertThat(fibonacciSum(7), equalTo(sum));
    }

    @Test
    public void fibonacciSqrSumTest() {
        BigInteger sum = ZERO;
        assertThat(fibonacciSqrSum(0), equalTo(sum));
        sum = sum.add(fSqr[0]);
        assertThat(fibonacciSqrSum(1), equalTo(sum));
        sum = sum.add(fSqr[1]);
        assertThat(fibonacciSqrSum(2), equalTo(sum));
        sum = sum.add(fSqr[2]);
        assertThat(fibonacciSqrSum(3), equalTo(sum));
        sum = sum.add(fSqr[3]);
        assertThat(fibonacciSqrSum(4), equalTo(sum));
        sum = sum.add(fSqr[4]);
        assertThat(fibonacciSqrSum(5), equalTo(sum));
        sum = sum.add(fSqr[5]);
        assertThat(fibonacciSqrSum(6), equalTo(sum));
        sum = sum.add(fSqr[6]);
        assertThat(fibonacciSqrSum(7), equalTo(sum));
    }

    @Test(timeout = 2000)
    public void fibonacciNoExponential() {
        assertThat(fibonacciNum(100), equalTo(SUM_100));
    }

    @Test(timeout = 2000)
    public void fibonnacciSumNoSquare() {
        assertThat(fibonacciSum(10000), equalTo(SUM_10000));
    }

    @Test(timeout = 2000)
    public void fibonnacciSqrSumNoSquare() {
        assertThat(fibonacciSqrSum(10000), equalTo(SUM_SQR_10000));
    }

}
